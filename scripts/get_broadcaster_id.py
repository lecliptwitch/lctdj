import requests
import os
import sys
import json # Import pour afficher la r√©ponse si besoin

# R√©cup√©rer les identifiants Twitch depuis les variables d'environnement
CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")

if not CLIENT_ID or not CLIENT_SECRET:
    print("‚ùå ERREUR: Les variables d'environnement TWITCH_CLIENT_ID ou TWITCH_CLIENT_SECRET ne sont pas d√©finies.")
    print("Veuillez les d√©finir avant d'ex√©cuter ce script (par exemple, 'export TWITCH_CLIENT_ID=votre_id').")
    sys.exit(1)

TWITCH_AUTH_URL = "https://id.twitch.tv/oauth2/token"
TWITCH_USERS_API_URL = "https://api.twitch.tv/helix/users"

def get_twitch_access_token():
    """R√©cup√®re un jeton d'acc√®s d'application pour l'API Twitch."""
    print("üîë Tentative de r√©cup√©ration du jeton d'acc√®s Twitch...")
    payload = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    try:
        response = requests.post(TWITCH_AUTH_URL, data=payload)
        response.raise_for_status() # L√®ve une exception pour les codes d'√©tat HTTP d'erreur (4xx ou 5xx)
        token_data = response.json()
        print("‚úÖ Jeton d'acc√®s Twitch r√©cup√©r√©.")
        return token_data["access_token"]
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration du jeton d'acc√®s Twitch : {e}")
        sys.exit(1)

def get_broadcaster_id(access_token, streamer_login):
    """R√©cup√®re l'ID d'un streamer Twitch √† partir de son nom d'utilisateur (login)."""
    headers = {
        "Client-ID": CLIENT_ID,
        "Authorization": f"Bearer {access_token}"
    }
    params = {
        "login": streamer_login
    }

    print(f"üîç Recherche de l'ID pour le streamer : '{streamer_login}'...")
    try:
        response = requests.get(TWITCH_USERS_API_URL, headers=headers, params=params)
        response.raise_for_status()
        user_data = response.json()

        if user_data and user_data.get("data"):
            # L'API retourne une liste, m√™me pour un seul login. On prend le premier √©l√©ment.
            broadcaster = user_data["data"][0]
            print(f"‚úÖ ID trouv√© pour '{streamer_login}' : {broadcaster['id']}")
            return broadcaster['id']
        else:
            print(f"‚ö†Ô∏è Aucun streamer trouv√© avec le login '{streamer_login}'. V√©rifiez l'orthographe.")
            # print(f"R√©ponse API compl√®te : {json.dumps(user_data, indent=2)}") # D√©commenter pour plus de d√©tails
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la requ√™te API Twitch pour '{streamer_login}' : {e}")
        if response.content:
            print(f"    Contenu de la r√©ponse API: {response.content.decode()}")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur de d√©codage JSON pour '{streamer_login}': {e}")
        if response.content:
            print(f"    Contenu brut de la r√©ponse: {response.content.decode()}")
        return None

if __name__ == "__main__":
    token = get_twitch_access_token()
    if token:
        # Demande √† l'utilisateur d'entrer le nom du streamer
        streamer_name = input("Entrez le nom d'utilisateur (login) du streamer Twitch : ").strip()
        
        if streamer_name:
            broadcaster_id = get_broadcaster_id(token, streamer_name)
            if broadcaster_id:
                print(f"\nVous pouvez ajouter cet ID √† votre liste BROADCASTER_IDS dans get_top_clips.py : '{broadcaster_id}'")
            else:
                print("\nImpossible de r√©cup√©rer l'ID du streamer. Assurez-vous que le nom est correct.")
        else:
            print("Aucun nom de streamer n'a √©t√© entr√©.")